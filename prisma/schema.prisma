generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model appointment {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date        DateTime @db.Date
  time        DateTime @db.Time(6)
  status      String   @db.VarChar(255)
  patient_id  String   @db.Uuid
  practice_id String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  patient     patient  @relation(fields: [patient_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  practice    practice @relation(fields: [practice_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model diagnosis {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String    @db.VarChar(255)
  description  String?   @db.VarChar(255)
  treatment_id String    @db.Uuid
  created_at   DateTime  @default(now()) @db.Timestamp(6)
  updated_at   DateTime  @default(now()) @db.Timestamp(6)
  treatment    treatment @relation(fields: [treatment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model patient {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name  String        @db.VarChar(255)
  last_name   String        @db.VarChar(255)
  dob         DateTime      @db.Date
  gender      String        @db.VarChar(255)
  phone       String        @db.VarChar(255)
  address     String        @db.VarChar(255)
  user_id     String        @db.Uuid
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  appointment appointment[]
  user        user          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  treatment   treatment[]
}

model practice {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?       @db.VarChar(255)
  name        String        @db.VarChar(255)
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  user_id     String        @db.Uuid
  tenant_id   String        @db.VarChar(255)
  appointment appointment[]
  user        user          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model treatment {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String      @db.VarChar(255)
  description String?     @db.VarChar(255)
  status      String      @db.VarChar(255)
  patient_id  String      @db.Uuid
  created_at  DateTime    @default(now()) @db.Timestamp(6)
  updated_at  DateTime    @default(now()) @db.Timestamp(6)
  diagnosis   diagnosis[]
  patient     patient     @relation(fields: [patient_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String     @unique @db.VarChar(255)
  firstName   String?    @db.VarChar(255)
  lastName    String?    @db.VarChar(255)
  roq_user_id String     @db.VarChar(255)
  tenant_id   String     @db.VarChar(255)
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  updated_at  DateTime   @default(now()) @db.Timestamp(6)
  patient     patient[]
  practice    practice[]
}
